"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5632],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),p=a,m=d["".concat(c,".").concat(p)]||d[p]||g[p]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},1991:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={id:"bridge-cosigner-manager",title:"Bridge Cosigner Manager",description:"Build your next blockchain app with Stratos.",keywords:["docs","stratos","exoswap"],image:"https://raw.githubusercontent.com/stratosnet/token-lists/master/logo.svg"},i=void 0,s={unversionedId:"bridge/contracts/bridge-cosigner-manager",id:"bridge/contracts/bridge-cosigner-manager",title:"Bridge Cosigner Manager",description:"Build your next blockchain app with Stratos.",source:"@site/docs/bridge/contracts/bridge-cosigner-manager.md",sourceDirName:"bridge/contracts",slug:"/bridge/contracts/bridge-cosigner-manager",permalink:"/docs/bridge/contracts/bridge-cosigner-manager",draft:!1,editUrl:"https://github.com/exoswapio/docs/tree/master/docs/bridge/contracts/bridge-cosigner-manager.md",tags:[],version:"current",frontMatter:{id:"bridge-cosigner-manager",title:"Bridge Cosigner Manager",description:"Build your next blockchain app with Stratos.",keywords:["docs","stratos","exoswap"],image:"https://raw.githubusercontent.com/stratosnet/token-lists/master/logo.svg"},sidebar:"bridge",previous:{title:"Bridge Token Manager",permalink:"/docs/bridge/contracts/bridge-token-manager"},next:{title:"Bridge Router",permalink:"/docs/bridge/contracts/bridge-router"}},c={},l=[{value:"Base functionality",id:"base-functionality",level:2},{value:"Cosigner",id:"cosigner",level:3},{value:"addCosigner",id:"addcosigner",level:3},{value:"removeCosigner",id:"removecosigner",level:3},{value:"getCosigners",id:"getcosigners",level:3},{value:"getCosignCount",id:"getcosigncount",level:3},{value:"verify",id:"verify",level:3}],u={toc:l},d="wrapper";function g(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To provide anti-fraud protection, the cosigner manager has been developed. It checks the validity of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/bridge/contracts/bridge-router#enter"},"enter")," result, verify correct signatures of exoswap on chain and ensures its uniqueness. For a successful transaction at the ",(0,a.kt)("a",{parentName:"p",href:"/docs/bridge/contracts/bridge-router#exit"},"exit")," function, it should have more than 66% of votes collected from cosigners."),(0,a.kt)("h2",{id:"base-functionality"},"Base functionality"),(0,a.kt)("p",null,"The core and important logic for bridge cosigner manager"),(0,a.kt)("h3",{id:"cosigner"},"Cosigner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"struct Cosigner {\n    address addr;\n    uint256 chainId;\n    uint256 index;\n    bool active;\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Should not be a zero to prevent unexpected behaviour;"),(0,a.kt)("li",{parentName:"ul"},"Should represent for what chain it specific for;"),(0,a.kt)("li",{parentName:"ul"},"Could be deactivate in case of compromise;")),(0,a.kt)("h3",{id:"addcosigner"},"addCosigner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"function addCosigner(address cosaddr, uint256 chainId) external;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Allows only SAO to execute;"),(0,a.kt)("li",{parentName:"ul"},"Should not add already existing cosigner on anychain (unique in mature);"),(0,a.kt)("li",{parentName:"ul"},"Could not be zero address;"),(0,a.kt)("li",{parentName:"ul"},"Could not add cosigner for local chain, only remote chains;")),(0,a.kt)("h3",{id:"removecosigner"},"removeCosigner"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"function removeCosigner(address cosaddr) external;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Allows only SAO to execute;"),(0,a.kt)("li",{parentName:"ul"},"Should remove if it exists;"),(0,a.kt)("li",{parentName:"ul"},"Could not be zero address;")),(0,a.kt)("h3",{id:"getcosigners"},"getCosigners"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"function getCosigners(uint256 chainId)\n    external\n    view\n    returns (address[] memory);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Should return active cosigners list for specific chain;"),(0,a.kt)("li",{parentName:"ul"},"Should not return cosigners for local chain;")),(0,a.kt)("h3",{id:"getcosigncount"},"getCosignCount"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"function getCosignCount(uint256 chainId) external view returns (uint8);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Should return the number of cosigners required to proof the ",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#enter"},"enter")," validity;"),(0,a.kt)("li",{parentName:"ul"},"Always must be more then 66% of existing cosigners;")),(0,a.kt)("h3",{id:"verify"},"verify"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"function verify(\n    bytes32 commitment,\n    uint256 chainId,\n    bytes[] calldata signatures\n) external view returns (bool);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Should be used in ",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#exit"},"exit")," function as basically designed for it;"),(0,a.kt)("li",{parentName:"ul"},"Signatures should not be equal and function must protect from this;"),(0,a.kt)("li",{parentName:"ul"},"Always verify external chain id;")))}g.isMDXComponent=!0}}]);