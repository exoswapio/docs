"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7793],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(r),g=a,m=u["".concat(l,".").concat(g)]||u[g]||p[g]||o;return r?n.createElement(m,i(i({ref:t},d),{},{components:r})):n.createElement(m,i({ref:t},d))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},2065:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={id:"bridge-token-manager",title:"Bridge Token Manager",description:"Build your next blockchain app with Stratos.",keywords:["docs","stratos","exoswap"],image:"https://raw.githubusercontent.com/stratosnet/token-lists/master/logo.svg"},i=void 0,s={unversionedId:"bridge/contracts/bridge-token-manager",id:"bridge/contracts/bridge-token-manager",title:"Bridge Token Manager",description:"Build your next blockchain app with Stratos.",source:"@site/docs/bridge/contracts/bridge-token-manager.md",sourceDirName:"bridge/contracts",slug:"/bridge/contracts/bridge-token-manager",permalink:"/docs/bridge/contracts/bridge-token-manager",draft:!1,editUrl:"https://github.com/exoswapio/docs/tree/master/docs/bridge/contracts/bridge-token-manager.md",tags:[],version:"current",frontMatter:{id:"bridge-token-manager",title:"Bridge Token Manager",description:"Build your next blockchain app with Stratos.",keywords:["docs","stratos","exoswap"],image:"https://raw.githubusercontent.com/stratosnet/token-lists/master/logo.svg"},sidebar:"bridge",previous:{title:"Bridge Token",permalink:"/docs/bridge/contracts/bridge-token"},next:{title:"Bridge Cosigner Manager",permalink:"/docs/bridge/contracts/bridge-cosigner-manager"}},l={},c=[{value:"Base functionality",id:"base-functionality",level:2},{value:"issue",id:"issue",level:3},{value:"revoke",id:"revoke",level:3},{value:"getLocal",id:"getlocal",level:3},{value:"isZero",id:"iszero",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Bridge Token Manager is used for issuing new tokens with a 1-to-1 connection between donor and Exoswap tokens, revoking deprecated tokens (or after a bridge update), and fetching information about local token representation."),(0,a.kt)("h2",{id:"base-functionality"},"Base functionality"),(0,a.kt)("p",null,"The core and important logic for token issuing by manager"),(0,a.kt)("h3",{id:"issue"},"issue"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"function issue(\n    address[] calldata tokens,\n    RToken.IssueType[] calldata issueTypes,\n    uint256 targetChainId\n) external;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Allows SAO to add a new token/s with it issue type (DEFAULT means donor and MINTABLE means syndicated);"),(0,a.kt)("li",{parentName:"ul"},"Should be protected from malicious changes and used by SAO;"),(0,a.kt)("li",{parentName:"ul"},"Specified target represent for what chain is doing for and should always connect with current chain;")),(0,a.kt)("h3",{id:"revoke"},"revoke"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"function revoke(address targetAddr) external;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Allows SAO to remove an existing token/s from connection with current chain;"),(0,a.kt)("li",{parentName:"ul"},"Should be used by SAO;")),(0,a.kt)("h3",{id:"getlocal"},"getLocal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"function getLocal(address sourceAddr, uint256 targetChainId)\n    external\n    view\n    returns (RToken.Token memory token);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Allows to fetch info about local token by ",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router"},(0,a.kt)("strong",{parentName:"a"},"Bridge Router"))," during ",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#enter"},"enter"),"/",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#exit"},"exit")," processes;"),(0,a.kt)("li",{parentName:"ul"},"If token does not exist for local chain, will return info about this;"),(0,a.kt)("li",{parentName:"ul"},"Should always return what issue type it has;"),(0,a.kt)("li",{parentName:"ul"},"Should always return what chain id it represents;")),(0,a.kt)("h3",{id:"iszero"},"isZero"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"function isZero(uint256 targetChainId) external view returns (bool);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Allows to check info about local native token if it exists by ",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router"},(0,a.kt)("strong",{parentName:"a"},"Bridge Router"))," during ",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#enter"},"enter"),"/",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#exit"},"exit")," processes;"),(0,a.kt)("li",{parentName:"ul"},"Should not return ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," and must be set originally;"),(0,a.kt)("li",{parentName:"ul"},"Just a wrapper on ",(0,a.kt)("inlineCode",{parentName:"li"},"getLocal"),";")))}p.isMDXComponent=!0}}]);