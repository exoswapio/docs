"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7770],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),g=o,m=p["".concat(s,".").concat(g)]||p[g]||u[g]||a;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={id:"bridge-token",title:"Bridge Token",description:"Build your next blockchain app with Stratos.",keywords:["docs","stratos","exoswap"],image:"https://raw.githubusercontent.com/stratosnet/token-lists/master/logo.svg"},i=void 0,l={unversionedId:"bridge/contracts/bridge-token",id:"bridge/contracts/bridge-token",title:"Bridge Token",description:"Build your next blockchain app with Stratos.",source:"@site/docs/bridge/contracts/bridge-token.md",sourceDirName:"bridge/contracts",slug:"/bridge/contracts/bridge-token",permalink:"/docs/bridge/contracts/bridge-token",draft:!1,editUrl:"https://github.com/exoswapio/docs/tree/master/docs/bridge/contracts/bridge-token.md",tags:[],version:"current",frontMatter:{id:"bridge-token",title:"Bridge Token",description:"Build your next blockchain app with Stratos.",keywords:["docs","stratos","exoswap"],image:"https://raw.githubusercontent.com/stratosnet/token-lists/master/logo.svg"},sidebar:"bridge",previous:{title:"Glossary",permalink:"/docs/bridge/glossary"},next:{title:"Bridge Token Manager",permalink:"/docs/bridge/contracts/bridge-token-manager"}},s={},c=[{value:"Base functionality",id:"base-functionality",level:2},{value:"mint",id:"mint",level:3},{value:"burn",id:"burn",level:3},{value:"Donored token symbol changed?",id:"donored-token-symbol-changed",level:2},{value:"updateTokenInfo",id:"updatetokeninfo",level:3}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To establish the connection between chains, the Bridge utilizes the ",(0,o.kt)("a",{parentName:"p",href:"/docs/bridge/glossary"},(0,o.kt)("strong",{parentName:"a"},"exoswap"))," token to create a mapping with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/bridge/glossary"},(0,o.kt)("strong",{parentName:"a"},"donor"))," token."),(0,o.kt)("p",null,"The whole design is simple. It is an ERC-20 contract with mint/burn functions, where ",(0,o.kt)("a",{parentName:"p",href:"/docs/bridge/contracts/bridge-token-manager"},(0,o.kt)("strong",{parentName:"a"},"Bridge Token Manager"))," will handle the token mapping, and the ",(0,o.kt)("a",{parentName:"p",href:"/docs/bridge/contracts/bridge-router"},(0,o.kt)("strong",{parentName:"a"},"Bridge Router"))," will only have access to perform this operation."),(0,o.kt)("h2",{id:"base-functionality"},"Base functionality"),(0,o.kt)("p",null,"The core and important logic for bridge token"),(0,o.kt)("h3",{id:"mint"},"mint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"function mint(address to, uint256 amount) external;\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Allows only ",(0,o.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router"},(0,o.kt)("strong",{parentName:"a"},"Bridge Router"))," to perform this operation by EOA/Contract;"),(0,o.kt)("li",{parentName:"ul"},"Should mint only in the same equivalent as locked donored tokens;")),(0,o.kt)("h3",{id:"burn"},"burn"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"function burn(address from, uint256 amount) external;\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Allows only ",(0,o.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router"},(0,o.kt)("strong",{parentName:"a"},"Bridge Router"))," to perform this operation by EOA/Contract;"),(0,o.kt)("li",{parentName:"ul"},"Should burn only in the same equivalent for next donored tokens unlock;")),(0,o.kt)("h2",{id:"donored-token-symbol-changed"},"Donored token symbol changed?"),(0,o.kt)("p",null,"In case donored token changes its symbol (like proxy contract), the following changes could be made to update it for Exoswap Token by SAO."),(0,o.kt)("h3",{id:"updatetokeninfo"},"updateTokenInfo"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"function updateTokenInfo(\n    string calldata _newName,\n    string calldata _newSymbol,\n    uint8 _newDecimals\n) external;\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Allows only ",(0,o.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router"},(0,o.kt)("strong",{parentName:"a"},"Bridge Router"))," to perform this operation by SAO;"),(0,o.kt)("li",{parentName:"ul"},"Should not change decimals;")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"NOTE: ",(0,o.kt)("inlineCode",{parentName:"p"},"updateTokenInfo")," function is not implemented for bridge usage (will be in Version 1)."))}u.isMDXComponent=!0}}]);