"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3402],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(k,i(i({ref:t},c),{},{components:r})):n.createElement(k,i({ref:t},c))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},842:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905)),o=r(4996);const i={id:"architecture",title:"Overview",description:"Build your next blockchain app with Exoswap.",keywords:["docs","stratos","exoswap"],image:"https://raw.githubusercontent.com/stratosnet/token-lists/master/logo.svg"},l=void 0,s={unversionedId:"bridge/architecture",id:"bridge/architecture",title:"Overview",description:"Build your next blockchain app with Exoswap.",source:"@site/docs/bridge/architecture.md",sourceDirName:"bridge",slug:"/bridge/architecture",permalink:"/docs/bridge/architecture",draft:!1,editUrl:"https://github.com/exoswapio/docs/tree/master/docs/bridge/architecture.md",tags:[],version:"current",frontMatter:{id:"architecture",title:"Overview",description:"Build your next blockchain app with Exoswap.",keywords:["docs","stratos","exoswap"],image:"https://raw.githubusercontent.com/stratosnet/token-lists/master/logo.svg"},sidebar:"bridge",previous:{title:"Intro",permalink:"/docs/develop/new-to-project"},next:{title:"Glossary",permalink:"/docs/bridge/glossary"}},p={},c=[{value:"Exoswap Bridge",id:"exoswap-bridge",level:2},{value:"Tutorial",id:"tutorial",level:3},{value:"Comparison chart between another bridge implementations (with Ethereum)",id:"comparison-chart-between-another-bridge-implementations-with-ethereum",level:3},{value:"Description of workflow",id:"description-of-workflow",level:3},{value:"Token issuing flow",id:"token-issuing-flow",level:3},{value:"Smart contracts stack",id:"smart-contracts-stack",level:2}],u={toc:c},m="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"exoswap-bridge"},"Exoswap Bridge"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"URL"),": ",(0,a.kt)("a",{parentName:"p",href:"https://app.exoswap.io/#/bridge"},"https://app.exoswap.io/#/bridge")),(0,a.kt)("p",null,"Exoswap bridge is a blockchain application designed to facilitate seamless token transitions between EVM chains. Our hardworking team has been focused on implementing the Nexus bridge, enabling smooth transitions between multiple chains simultaneously."),(0,a.kt)("p",null,"Architecturally, the beauty of Exoswap bridge lies in its simple and straightforward design, which enables fast and cost-effective transactions for transferring tokens between EVM chains."),(0,a.kt)("h3",{id:"tutorial"},"Tutorial"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Bridge interaction \ud83c\udfa5 ",(0,a.kt)("a",{parentName:"li",href:"https://www.youtube.com"},"Your first Exoswap STOS"))),(0,a.kt)("h3",{id:"comparison-chart-between-another-bridge-implementations-with-ethereum"},"Comparison chart between another bridge implementations (with Ethereum)"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Stratos (Exoswap)"),(0,a.kt)("th",{parentName:"tr",align:null},"Polygon (Plasma)"),(0,a.kt)("th",{parentName:"tr",align:null},"Polygon (PoS)"),(0,a.kt)("th",{parentName:"tr",align:null},"Celo (Optics)"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Centralization"),(0,a.kt)("td",{parentName:"tr",align:null},"Semi-centralized"),(0,a.kt)("td",{parentName:"tr",align:null},"Decentralized"),(0,a.kt)("td",{parentName:"tr",align:null},"Decentralized"),(0,a.kt)("td",{parentName:"tr",align:null},"Semi-centralized")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Use proxy"),(0,a.kt)("td",{parentName:"tr",align:null},"yes"),(0,a.kt)("td",{parentName:"tr",align:null},"no"),(0,a.kt)("td",{parentName:"tr",align:null},"no"),(0,a.kt)("td",{parentName:"tr",align:null},"yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Supported chains"),(0,a.kt)("td",{parentName:"tr",align:null},"Ethereum",(0,a.kt)("br",null)," Stratos"),(0,a.kt)("td",{parentName:"tr",align:null},"Ethereum",(0,a.kt)("br",null)," Polygon"),(0,a.kt)("td",{parentName:"tr",align:null},"Ethereum",(0,a.kt)("br",null)," Polygon"),(0,a.kt)("td",{parentName:"tr",align:null},"Ethereum",(0,a.kt)("br",null)," Celo")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Max process duration"),(0,a.kt)("td",{parentName:"tr",align:null},"~4-5 minutes"),(0,a.kt)("td",{parentName:"tr",align:null},"~7 days"),(0,a.kt)("td",{parentName:"tr",align:null},"~35-37 minutes"),(0,a.kt)("td",{parentName:"tr",align:null},"~6-8 hours")))),(0,a.kt)("h3",{id:"description-of-workflow"},"Description of workflow"),(0,a.kt)("p",null,"Currently, developers can use ",(0,a.kt)("strong",{parentName:"p"},"Exoswap Bridge")," for specific needs to automate DEX cross-chain usage behind our contracts with the help of cosigners handling. ",(0,a.kt)("strong",{parentName:"p"},"Cosigner"),", shortly, is the one who verifies and signs transactions for validity, providing its proof. The group of cosigners is called the ",(0,a.kt)("strong",{parentName:"p"},"verifier group"),", which regulates token pegging, detects fraud, and oraclizes network information."),(0,a.kt)("p",null,"The native chain used to create the bridge is the Stratos network, harnessing the power of EVM and referred to as the ",(0,a.kt)("strong",{parentName:"p"},"Exoswap")," bridge."),(0,a.kt)("p",null,"Exoswap bridge has a three-steps architecture, hovewer tokens logics differ in case of token ",(0,a.kt)("strong",{parentName:"p"},"original transfers"),". Let's introduce a quick example."),(0,a.kt)("p",null,"The native currency on the Stratos is STOS token. In case of Ethereum it's pegged representation will be STOS (means ",(0,a.kt)("strong",{parentName:"p"},"mintable"),"). So STOS token is ",(0,a.kt)("strong",{parentName:"p"},"mintable")," token and native STOS is ",(0,a.kt)("strong",{parentName:"p"},"original"),". In combination it represent the following schema for user when he cross-chain transfer from Stratos to Ethereum:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Locking STOS amount on the Stratos bridge;"),(0,a.kt)("li",{parentName:"ol"},"Obtain exoswap signatures for proof;"),(0,a.kt)("li",{parentName:"ol"},"Ethereum bridge mints exoswap token representation in the ",(0,a.kt)("strong",{parentName:"li"},"same")," equivalent as STOS token;")),(0,a.kt)("p",null,"So it is always 1-1 representation for the token.\nThe next scenario, when user wants to get a donored token back, next schema will be applied:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Ethereum bridge burns STOS exoswap token representation;"),(0,a.kt)("li",{parentName:"ol"},"Obtain exoswap signatures for proof;"),(0,a.kt)("li",{parentName:"ol"},"Unlock STOS amount on the Stratos in the ",(0,a.kt)("strong",{parentName:"li"},"same")," equivalent;")),(0,a.kt)("p",null,"In terms of smart contract functionality, only 2 transactions will be used:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#enter"},"enter")," function to lock (donor) / burn (exoswap);"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#exit"},"exit")," function to unlock (donor) / mint (exoswap);")),(0,a.kt)("p",null,"Briefly:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"All cross chain tokens have 1-to-1 equivalent;"),(0,a.kt)("li",{parentName:"ol"},"Only two transactions used - enter (on source chain) and exit (on target chain);"),(0,a.kt)("li",{parentName:"ol"},"Each exit requires exoswap proof;")),(0,a.kt)("h3",{id:"token-issuing-flow"},"Token issuing flow"),(0,a.kt)("p",null,"As example let's take Stratos to Ethereum flow"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"NOTE: same flow for all cross-chains EVM networks")),(0,a.kt)("img",{src:(0,o.Z)("img/architecture/evm_bridge_flow.drawio.svg")}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Start flow:")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"User send his crypto to a bridge on Stratos network (",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#enter"},"enter")," / ",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#enterETH"},"enterETH"),");"),(0,a.kt)("li",{parentName:"ol"},"Stratos network will store info about this operation, will lock if token is original or burn if token is mintable;"),(0,a.kt)("li",{parentName:"ol"},"Exoswap verifier will see the commit result of ",(0,a.kt)("strong",{parentName:"li"},"enter")," operation and should ask SAO for validate a proof;"),(0,a.kt)("li",{parentName:"ol"},"SAO roundrobinly will sign the transactions with 2/3 voting power and will make it available for user;"),(0,a.kt)("li",{parentName:"ol"},"If bridge tx could cover execution fee, relayer will be used;")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"If no:")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"(",(0,a.kt)("strong",{parentName:"li"},"U6a"),") User obtain exoswap's signatures for next process;"),(0,a.kt)("li",{parentName:"ol"},"(",(0,a.kt)("strong",{parentName:"li"},"U6b"),") User send transaction to a bridge on Ethereum network (",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#exit"},"exit"),") with obtained signatures;")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"If yes:")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"(",(0,a.kt)("strong",{parentName:"li"},"R6"),") Relayer send transaction on behalf to a bridge on Ethereum network (",(0,a.kt)("a",{parentName:"li",href:"/docs/bridge/contracts/bridge-router#exit"},"exit"),") with obtained signatures;")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Rest flow:")),(0,a.kt)("ol",{start:7},(0,a.kt)("li",{parentName:"ol"},"Ethereum network will store info about this operation, will unlock the 1-to-1 equivalent of tokens if token is original or mint 1-to-1 equivalent if token is mintable;"),(0,a.kt)("li",{parentName:"ol"},"User receive funds after successfull execution;")),(0,a.kt)("h2",{id:"smart-contracts-stack"},"Smart contracts stack"),(0,a.kt)("p",null,"Exoswap bridge maintains a set of smart contracts on Stratos, Ethereum, Binance, Matic, which handle the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Bridge Token contract which is a exoswap token equivalent for donor token;"),(0,a.kt)("li",{parentName:"ul"},"Bridge Token Manager for verification 1-to-1 connection;"),(0,a.kt)("li",{parentName:"ul"},"Bridge Cosigner Manager verificator for exoswap;"),(0,a.kt)("li",{parentName:"ul"},"Bridge Router the main orchestrator for all 3 contracts above;")))}d.isMDXComponent=!0}}]);